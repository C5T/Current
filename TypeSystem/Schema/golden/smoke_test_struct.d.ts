// Generated by C5T/Current.
declare namespace C5TCurrent {
  type Bool = boolean;
  type UInt8 = number;
  type UInt16 = number;
  type UInt32 = number;
  type UInt64 = number;
  type Int8 = number;
  type Int16 = number;
  type Int32 = number;
  type Int64 = number;
  type Char = string;
  type String = string;
  type Float = number;
  type Double = number;
  type Microseconds = number;
  type Milliseconds = number;
  type Optional<T> = T | null;
  type Pair<T_FIRST, T_SECOND> = [ T_FIRST, T_SECOND ];
  type Set<T> = T[];
  type UnorderedSet<T> = T[];
  type NonPrimitiveMap<T_KEY, T_VALUE> = Pair<T_KEY, T_VALUE>[];
  type NonPrimitiveUnorderedMap<T_KEY, T_VALUE> = Pair<T_KEY, T_VALUE>[];
  interface PrimitiveMap<T_VALUE> { [key: string]: T_VALUE; [key: number]: T_VALUE; }
  interface PrimitiveUnorderedMap<T_VALUE> { [key: string]: T_VALUE; [key: number]: T_VALUE; }
}

declare interface Primitives {
  // It's the "order" of fields that matters.
  a: C5TCurrent.UInt8;

  // Field descriptions can be set in any order.
  b: C5TCurrent.UInt16;
  c: C5TCurrent.UInt32;
  d: C5TCurrent.UInt64;
  e: C5TCurrent.Int8;
  f: C5TCurrent.Int16;
  g: C5TCurrent.Int32;
  h: C5TCurrent.Int64;
  i: C5TCurrent.Char;
  j: C5TCurrent.String;
  k: C5TCurrent.Float;
  l: C5TCurrent.Double;

  // Multiline
  // descriptions
  // can be used.
  m: C5TCurrent.Bool;
  n: C5TCurrent.Microseconds;
  o: C5TCurrent.Milliseconds;
}

declare interface A {
  a: C5TCurrent.Int32;
}

declare interface B extends A {
  b: C5TCurrent.Int32;
}

declare interface B2 extends A {
}

declare interface Empty {
}

declare interface X {
  x: C5TCurrent.Int32;
}

declare type E = C5TCurrent.UInt16;

declare interface Y {
  e: E;
}

declare type MyFreakingVariant = 
  A | 
  X | 
  Y;

declare type Variant_B_A_X_Y_E = 
  A | 
  X | 
  Y;

declare interface C {
  e: Empty;
  c: MyFreakingVariant;
  d: Variant_B_A_X_Y_E;
}

declare type Variant_B_A_B_B2_C_Empty_E = 
  A | 
  B | 
  B2 | 
  C | 
  Empty;

declare interface Templated_T9209980946934124423 {
  foo: C5TCurrent.Int32;
  bar: X;
}

declare interface Templated_T9227782344077896555 {
  foo: C5TCurrent.Int32;
  bar: MyFreakingVariant;
}

declare interface TemplatedInheriting_T9200000002835747520 extends A {
  baz: C5TCurrent.String;
  meh: Empty;
}

declare interface Templated_T9209626390174323094 {
  foo: C5TCurrent.Int32;
  bar: TemplatedInheriting_T9200000002835747520;
}

declare interface TemplatedInheriting_T9209980946934124423 extends A {
  baz: C5TCurrent.String;
  meh: X;
}

declare interface TemplatedInheriting_T9227782344077896555 extends A {
  baz: C5TCurrent.String;
  meh: MyFreakingVariant;
}

declare interface Templated_T9200000002835747520 {
  foo: C5TCurrent.Int32;
  bar: Empty;
}

declare interface TemplatedInheriting_T9201673071807149456 extends A {
  baz: C5TCurrent.String;
  meh: Templated_T9200000002835747520;
}

declare interface TrickyEvolutionCases {
  o1: C5TCurrent.Optional<C5TCurrent.String>;
  o2: C5TCurrent.Optional<C5TCurrent.Int32>;
  o3: C5TCurrent.Optional<C5TCurrent.String[]>;
  o4: C5TCurrent.Optional<C5TCurrent.Int32[]>;
  o5: C5TCurrent.Optional<A[]>;
  o6: C5TCurrent.Pair<C5TCurrent.String, C5TCurrent.Optional<A>>;
  o7: C5TCurrent.PrimitiveMap<C5TCurrent.Optional<A>>;
}

declare interface FullTest {
  // A structure with a lot of primitive types.
  primitives: Primitives;
  v1: C5TCurrent.String[];
  v2: Primitives[];
  p: C5TCurrent.Pair<C5TCurrent.String, Primitives>;
  o: C5TCurrent.Optional<Primitives>;

  // Field | descriptions | FTW !
  q: Variant_B_A_B_B2_C_Empty_E;
  w1: Templated_T9209980946934124423;
  w2: Templated_T9227782344077896555;
  w3: Templated_T9209626390174323094;
  w4: TemplatedInheriting_T9209980946934124423;
  w5: TemplatedInheriting_T9227782344077896555;
  w6: TemplatedInheriting_T9201673071807149456;
  tsc: TrickyEvolutionCases;
}
