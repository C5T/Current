# A universal Makefile for Current C++ code.
#
# By default, runs the test (compiled from `test.cc`) if present, or just runs all the binaries one after another.
#
# Also supports `all` (build *.cc), `clean`, `indent` (via clang-format), `check` and `coverage`.

# TODO(dkorolev): Add a top-level 'make update' target to update from GitHub.

.PHONY: test docu docu_impl README.md all indent clean check coverage

# Need to know where to invoke scripts from, since `Makefile` can be a relative path symlink.
MAKEFILE_NAME = $(lastword $(MAKEFILE_LIST))
CURRENT_SCRIPTS_DIR := $(patsubst %\,%,$(patsubst %/,%,$(dir $(shell readlink "$(MAKEFILE_NAME)" || echo "$(MAKEFILE_NAME)"))))
CURRENT_SCRIPTS_DIR_FULL_PATH := $(shell "$(CURRENT_SCRIPTS_DIR)/fullpath.sh" "$(CURRENT_SCRIPTS_DIR)" )

# Trust me, I'm an engineer. -- D.K.
# TODO(mzhurovich): Please test on Mac.
# `_DEPS`: To appear on the right hand side of make target definition.
# `_LIST`: To pass as a parameter to an external tool, as necessary.
# The magic with echo + quotes is to handle spaces correctly. "Works on my machine!" -- D.K.
LOCAL_HEADERS_DEPS=$(shell find . -maxdepth 1 -name '*.h' -exec echo '{}' ';' | grep -v "current_build.h" | sort -g)
LOCAL_HEADERS_LIST=$(shell find . -maxdepth 1 -name '*.h' -exec echo '"{}"' ';' | grep -v "current_build.h" | sort -g)

CPLUSPLUS?=g++

CPPFLAGS=-std=c++11 -W -Wall
CPPFLAGS+= -Wno-strict-aliasing  # To suppress FnCAS tight struct packing warnings. -- D.K.

# Disabled as it generates `-Wno-noexcept-type` on clang++. -- D.K.
# CPPFLAGS+= -Wno-noexcept-type    # To suppress the "warning: mangled name will change in C++17" warnings. -- D.K.

# Taking the liberty to comment this out. -- D.K.
# CPPFLAGS+= -ftemplate-backtrace-limit=0  -ftemplate-depth=10000

ifeq ($(NDEBUG),1)
  CPPFLAGS+= -O3 -DNDEBUG
else
  # Commented out by @dkorolev -- this flag makes compilation slower, and is best to be enabled manually.
  # CPPFLAGS+= -g
endif

CURRENT_CI?=0

CONTINUOUS_INTEGRATION?=0
ifeq ($(CONTINUOUS_INTEGRATION),true)
  CURRENT_CI=1
endif

TRAVIS?=0
ifeq ($(TRAVIS),true)
  CURRENT_CI=1
endif

ifeq (${CURRENT_CI},1)
  CPPFLAGS+= -DCURRENT_CI
endif

LDFLAGS=-pthread -ldl

# Also `-latomic`, but due to discrepancies between g++ and clang++, not now. -- D.K.
# http://stackoverflow.com/questions/29824570/segfault-in-stdatomic-load/29824840#29824840 -- M.Z.

PWD=$(shell pwd)
SRC=$(wildcard *.cc)
BIN=$(SRC:%.cc=.current/%)

PERMSIGN= /
OS=$(shell uname)
ifeq ($(OS),Darwin)
  CPPFLAGS+= -stdlib=libc++ -x objective-c++ -fobjc-arc
  # Reset `LDFLAGS` with the new Darwin-specific value.
  LDFLAGS= -framework Foundation
  PERMSIGN= +
endif

default: all
	if [ -f test.cc ] ; then \
		make test ;\
	else \
		find .current/ -perm ${PERMSIGN}111 -type f -exec "{}" ";" ; \
	fi

test: .current/test
	.current/test --current_runtime_arch=${OS}

docu: docu_impl
	# On Linux, `make docu` copies the freshly regenerated README.md into clipboard right away.
	# TODO(dkorolev): Perhaps condition on the existence of `xclip` is a better idea?
ifeq ($(shell uname), Linux)
	cat README.md | xclip -selection c
endif

docu_impl: README.md

README.md:
	${CURRENT_SCRIPTS_DIR_FULL_PATH}/gen-readme.sh

debug: phony_current_build
	ulimit -c unlimited && touch test.cc && rm -f core && make ./.current/test && (./.current/test && echo OK || gdb ./.current/test core)

all: ${BIN} README.md

clean:
	find . -type d -name .current | xargs rm -rf
	find . -type f -name 'current_build.h' | xargs rm -f
	find . -type f -name 'current_build.h.*' | xargs rm -f
	find . -type f -name '.current_std???.txt' | xargs rm -f
	find . -type f -name core | xargs rm -f
	find . -type f -name '.current_*.*.*' | xargs rm -f  # `make check`'s `*.clang++.cc.o` stuff.
	find . -type l -name '.current_*' | xargs rm -f
	find . -type l -name '.current_*.*' | xargs rm -f

.current/%: %.cc ${LOCAL_HEADERS_DEPS} | phony_current_build
	@(mkdir -p .current)
	${CPLUSPLUS} ${CPPFLAGS} -o "$@" "$<" ${LDFLAGS}

indent:
	"${CURRENT_SCRIPTS_DIR_FULL_PATH}/indent.sh"

check:
	"${CURRENT_SCRIPTS_DIR_FULL_PATH}/check-headers.sh"

coverage:
	"${CURRENT_SCRIPTS_DIR_FULL_PATH}/coverage-report.sh"

wc:
	echo -n "Total files: " ; (find . -name '*.cc' ; find . -iname '*.h') | grep -v "/3rdparty/" | grep -v "/.current/" | grep -v "/zzz_full_test/" | wc -l
	(find . -name '*.cc' ; find . -iname '*.h') | grep -v "/3rdparty/" | grep -v "/.current/" | grep -v "/zzz_full_test/" | xargs wc -l | sort -gr
