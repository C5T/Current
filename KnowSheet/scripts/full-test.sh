#!/bin/bash
#
# Compiles all the tests into one binary, runs all the tests and generates the complete coverage report.
#
# Currently supports Linux only due to the coverage generation tool used.
#
# TODO(dkorolev): Look into making this script run on Mac.

set -u -e

CPPFLAGS="-std=c++11 -g -Wall -W -fprofile-arcs -ftest-coverage -DBRICKS_COVERAGE_REPORT_MODE"
LDFLAGS="-pthread"
if [ $(uname) = "Darwin" ] ; then
  CPPFLAGS+=" -stdlib=libc++ -x objective-c++ -fobjc-arc"
  LDFLAGS+=" -framework Foundation"
fi

# NOTE: FULL_TEST_DIR must be resolved from the current working directory.

KNOWSHEET_SCRIPTS_DIR=$( dirname "${BASH_SOURCE[0]}" )
RUN_DIR_FULL_PATH=$( "$KNOWSHEET_SCRIPTS_DIR/KnowSheetReadlink.sh" "$PWD" )

FULL_TEST_DIR_NAME="zzz_full_test"  # The `zzz` prefix guarantees the full test directory is down the list.
FULL_TEST_DIR_FULL_PATH="$RUN_DIR_FULL_PATH/$FULL_TEST_DIR_NAME"

ALL_TESTS_TOGETHER="everything"

GOLDEN_DIR_NAME="golden"
GOLDEN_FULL_PATH="$FULL_TEST_DIR_FULL_PATH/$GOLDEN_DIR_NAME"

# Concatenate all `test.cc` files in the right way, creating one test to rule them all.
mkdir -p "$FULL_TEST_DIR_NAME"
(
echo '// This file is auto-generated by KnowSheet/scripts/full-test.sh.' ;
echo '// It is updated by running `make run` in the top-level Bricks directory, along with the documentation.'
echo '// And it is checked in, much like the documentation, so that non-*nix systems can run all the tests.'
echo
echo '#include "port.h"  // To have `std::{min/max}` work in Visual Studio, need port.h before STL headers.'
echo
echo '#include "dflags/dflags.h"'
echo '#include "3party/gtest/gtest-main-with-dflags.h"'
echo
) > "$FULL_TEST_DIR_NAME/$ALL_TESTS_TOGETHER.cc"


echo -n -e "\033[0m\033[1mTests:\033[0m\033[36m"
for i in $(find . -iname "*test.cc" | grep -v 3party | grep -v "/.noshit/" | sort -g); do
  echo "#include \"$i\"" >> "$FULL_TEST_DIR_NAME/$ALL_TESTS_TOGETHER.cc"
  echo -n " $i"
done

# Allow this one test to rule them all to access all the `golden/` files.
mkdir -p "$GOLDEN_FULL_PATH"
echo -e "\n\n\033[0m\033[1mGolden files\033[0m: \033[35m"
for dirname in $(find . -iname "$GOLDEN_DIR_NAME" -type d | grep -v 3party | grep -v "/.noshit/" | grep -v "$FULL_TEST_DIR_NAME"); do
  (cd $dirname; for filename in * ; do cp -v "$PWD/$filename" "$GOLDEN_FULL_PATH" ; done)
done
echo -e -n "\033[0m"

(
  # Compile and run The Big Test.
  cd "$FULL_TEST_DIR_NAME"

  echo -e "\033[0m"
  echo -n -e "\033[1mCompiling all tests together: \033[0m\033[31m"
  g++ $CPPFLAGS -I .. "$ALL_TESTS_TOGETHER.cc" -o "$ALL_TESTS_TOGETHER" $LDFLAGS
  echo -e "\033[32m\033[1mOK.\033[0m"

  echo -e "\033[1mRunning the tests and generating coverage info.\033[0m"
  "./$ALL_TESTS_TOGETHER" || exit 1
  echo -e "\n\033[32m\033[1mALL TESTS PASS.\033[0m"

  # Generate the resulting code coverage report.
  gcov "$ALL_TESTS_TOGETHER.cc" >/dev/null
  geninfo . --output-file coverage0.info >/dev/null
  lcov -r coverage0.info /usr/include/\* \*/gtest/\* \*/3party/\* -o coverage.info >/dev/null
  genhtml coverage.info --output-directory coverage/ >/dev/null
  rm -rf coverage.info coverage0.info *.gcov *.gcda *.gcno
  echo
  echo -e -n "\033[0m\033[1mCoverage report\033[0m: \033[36m"
  echo -n "$FULL_TEST_DIR_FULL_PATH/coverage/index.html"
  echo -e "\033[0m"
)
